@page "/tododisplay"
@using Todo_Blazor.Model
@using Todo_Blazor.SharedService
@inject TodoService TodoService

@if (TodoItems.Any())
{
    <table>
        <thead>
            <tr>
                <th>Select</th>
                <th>Task Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in TodoItems)
            {
                <tr>
                    <td><input class="form-check-input" type="checkbox" @bind="@item.IsDone" @bind:event="onchange" @onclick="@(() => UpdateTaskStatus(item))" /></td>
                    <td>@item.TaskName</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="behaviours">
        <button @onclick="RemoveTasks">Remove</button>
        <button @onclick="SortTasks">Sort</button>
    </div>
}
else
{
    <p>@message</p>
}


@code
{
    [CascadingParameter]
    public UserState_Management_Service userStateService { get; set; } = null!;

    [Parameter]
    public List<TodoData> TodoItems { get; set; } = new();

    public string message = "";

    [Parameter]
    public EventCallback<TodoData> OnTaskStatusUpdated { get; set; }

    private async Task UpdateTaskStatus(TodoData task)
    {
        await OnTaskStatusUpdated.InvokeAsync(task); 
    }

    private async Task RemoveTasks()
    {
        var response = await TodoService.DeleteAsync();

        if (response)
        {
            TodoItems.RemoveAll(item => item.IsDone);
        }
        else
        {
            message = "Failed to remove completed tasks.";
        }
    }

    private void SortTasks(MouseEventArgs e)
    {
        TodoItems = TodoItems.OrderBy(task => task.TaskName).ToList();
    }
}