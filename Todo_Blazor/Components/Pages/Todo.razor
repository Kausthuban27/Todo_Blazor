@page "/todo"
@using Todo_Blazor.Components.Layout
@using Todo_Blazor.SharedService
@using Todo_Blazor.Model
@rendermode InteractiveServer
@inject UserState_Management_Service userStateService
@inject NavigationManager Navigator
@inject HttpClient httpClient
@layout TodoLayout

<PageTitle>ToDo App</PageTitle>

<CascadingValue Value="userStateService">
    @if(userStateService.IsLoggedIn)
    {
        <button style="width:5%;float:right;margin-top:-1.5rem;" @onclick="LogOut">Logout</button>
        <h3 class="text-center">Welcome @userStateService.Username</h3>

        <div class="container text-center">
            <div class="brand-title">TASKS</div>
            <input @bind="TaskName" class="inputs" placeholder="Enter your tasks" />
        
            <div class="behaviours">
                    <button @onclick="AddTasks">Add Task</button>
            </div>

            <div>
                <TodoDisplay TodoItems="TodoItems" OnTaskStatusUpdated="UpdateTaskStatus"/>
            </div>
        </div>
    }
</CascadingValue>

@code
{
    public string TaskName { get; set; } = null!;
    public List<TodoData> TodoItems { get; set; } = new();
    public string message = "";

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
    }

    private async Task GetTasks()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<TodoData>>($"http://localhost:5075/Todo/GetTasks?username={userStateService.Username}");
            TodoItems = response!;
        }
        catch(Exception e)
        {
            message = $"Error occured {e}";
        }
    }


    private async Task AddTasks()
    {
        var newTask = new TodoData { TaskName = TaskName, Username = userStateService.Username };
        var response = await httpClient.PostAsJsonAsync("http://localhost:5075/Todo/AddTasks", newTask);
        if (response.IsSuccessStatusCode)
        {
            TodoItems.Add(newTask);
            TaskName = ""; 
        }
    }

    private async Task UpdateTaskStatus(TodoData task)
    {
        try
        {
            task.IsDone = true;
            var response = await httpClient.PutAsJsonAsync($"http://localhost:5075/Todo/UpdateTask", task); 
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            message = $"Error updating task status: {ex.Message}";
        }
    }

    private void LogOut()
    {
        userStateService.Clear(); 
        Navigator.NavigateTo("/"); 
    }
}
